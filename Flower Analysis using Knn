#Importing libraries....
import pandas as pd
import numpy as np

#i will here explore the data...Iris dataset is used here .. we will load it by calling the function load_iris function.
from sklearn.datasets import load_iris
iris_dataset = load_iris()

#here i'm printing the key values of Iris dataset
print("Keys of iris_dataset:\n{}" .format(iris_dataset.keys()))

#what exactly the key DESCR contains let's see:
print(iris_dataset['DESCR'][:193] + "\n...")

#let's see what value of the Key DESCR conatins....
val = iris_dataset['DESCR']
start_val = val[:200]
print(start_val + "\n...")

#as the key target_names contains the species of the flowers that we want to predict let's have a look..
print("Target names :{}" .format(iris_dataset['target_names']))

#print("Target names :{}" .format(iris_dataset['target_names']))
print("feature names: \n{}" .format(iris_dataset['feature_names']))

#as we know the data is conatined in the target and data fields let's see the type of the data...
print("Type of data: \n{}" .format(type(iris_dataset['data'])))

#as we know in this data rows corrosponds to flowers while the columns represent thw 4 measurements for each flower...
print("Shape of data: {}" .format(iris_dataset['data'].shape))

#here are the feature values for the first 5 samples...
print("First five columns of data:\n{}" .format(iris_dataset['data'][:5]))

#this is the last key i.e,.target which contains the species of the flowers that measured..
print("Type of the Target:{}" .format(type(iris_dataset['target'])))

#let's see the shape of target.
print("Shape of the Target:{}" .format(iris_dataset['target'].shape))

#print the target key and let's explore the values
print("Target:\n{}" .format(iris_dataset['target']))

#here in the output 0 means setosa ,1 means versicolor and 2 means virginca..

#importing train_test_split from sklearn.model_selection..
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
    iris_dataset['data'], iris_dataset['target'], random_state=0)
    
#printing the shapes of X-train,X-test,y-train,y_test
print("X_train shape:{}" .format(X_train.shape))
print("X_test shape:{}" .format(X_test.shape))
print("y_train shape:{}" .format(y_train.shape))
print("y_test shape:{}" .format(y_test.shape))

#will see the data by plotting thee graphs..
from pandas.plotting import scatter_matrix
iris_dataframe = pd.DataFrame(X_train, columns=iris_dataset.feature_names)
grr = scatter_matrix(iris_dataframe, c=y_train, figsize=(15,15), marker='o', 
                     hist_kwds={'bins' : 20}, s=60, alpha=.8)
                     
#here we started building our ML model using the KNeighbour classification algorithm

#Importing KNeighborsClassifier from sklearn.neighbors
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)

#to build the model on trainning set we called the fit method of the knn object
knn.fit(X_train, y_train)

#here im now making my predictions using this model on new data for which i knw thw lobels..
X_new = np.array([[5, 2.9, 1, 0.2]])
print("X_new.shape:{}" .format(X_new.shape))

#to make a prediction i called the predict method of the knn object
prediction = knn.predict(X_new)
print("Prediction:{}" .format(prediction))
print("Predicted Target name:{}" .format(iris_dataset['target_names'][prediction]))

#now here i'm making prediciton for each iris in the test data and will compare it to its labels
y_pred = knn.predict(X_test)
print("Test set predictions:\n{}" .format(y_pred))
print("Test set score:{}" .format(np.mean(y_pred == y_test)))

#Here i'm getting the accuracy like how well the model working.!

